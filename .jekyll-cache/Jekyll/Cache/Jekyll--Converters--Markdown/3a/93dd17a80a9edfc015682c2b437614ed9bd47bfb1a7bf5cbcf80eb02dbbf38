I"€5<h2 id="concurrentqueuedcoroutines-thread-safe-implementation-of-concurrentqueues-within-coroutinas">ConcurrentQueuedCoroutines: Thread-Safe Implementation of ConcurrentQueues within Coroutinas</h2>

<p>The idea of this utility is that when you store items from another thread, you can access it from the main thread.</p>

<p>Mixing this idea with the Coroutinas, which are a prehistoric system that Unity3D implemented in its moment. It works as follows: an IEnumerator is created (with a <code class="highlighter-rouge">yield return</code> statment), which each MoveNext executes in each frame (yield return null) or when the programmer specifies (<code class="highlighter-rouge">yield return new WaitForSeconds(3)</code> equivalent to <code class="highlighter-rouge">Thread.Sleep (3000)</code>) (this avoid that the main thread blocks, and yes, for those who ask, Unity3D engine is still implemented to run on a single thread).</p>

<p>So, having these 2 things, why not do Dequeue on each MoveNext?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Concurrent</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
 
<span class="k">namespace</span> <span class="nn">GTAMapper.Extensions.Threading</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Coroutine</span><span class="p">&gt;</span> <span class="n">coroutines</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">Coroutine</span> <span class="n">coroutine</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">MonoBehaviour</span> <span class="n">Mono</span><span class="p">;</span>
 
        <span class="k">public</span> <span class="n">ConcurrentQueue</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">Queue</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Action</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">Debugging</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">float</span> <span class="n">SecondsToWait</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
 
        <span class="k">private</span> <span class="nf">ConcurrentQueuedCoroutines</span><span class="p">()</span>
        <span class="p">{</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="nf">ConcurrentQueuedCoroutines</span><span class="p">(</span><span class="kt">float</span> <span class="n">secondsToWait</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Queue</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentQueue</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span>
            <span class="n">coroutines</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Coroutine</span><span class="p">&gt;();</span>
            <span class="n">SecondsToWait</span> <span class="p">=</span> <span class="n">secondsToWait</span><span class="p">;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">Coroutine</span> <span class="nf">StartCoroutine</span><span class="p">(</span><span class="n">MonoBehaviour</span> <span class="n">monoBehaviour</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">action</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">coroutines</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">monoBehaviour</span><span class="p">.</span><span class="nf">StartCoroutine</span><span class="p">(</span><span class="nf">InternalCoroutine</span><span class="p">()));</span>
            <span class="n">Mono</span> <span class="p">=</span> <span class="n">monoBehaviour</span><span class="p">;</span>
            <span class="n">Action</span> <span class="p">=</span> <span class="n">action</span><span class="p">;</span>
 
            <span class="k">return</span> <span class="n">coroutine</span><span class="p">;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">Coroutine</span> <span class="nf">StartCoroutineOnce</span><span class="p">(</span><span class="n">MonoBehaviour</span> <span class="n">monoBehaviour</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">action</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Debugging</span><span class="p">)</span>
                <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Starting dequeing!"</span><span class="p">);</span>
 
            <span class="k">if</span> <span class="p">(</span><span class="n">coroutine</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">coroutine</span> <span class="p">=</span> <span class="n">monoBehaviour</span><span class="p">.</span><span class="nf">StartCoroutine</span><span class="p">(</span><span class="nf">InternalCoroutine</span><span class="p">());</span>
                <span class="n">Mono</span> <span class="p">=</span> <span class="n">monoBehaviour</span><span class="p">;</span>
                <span class="n">Action</span> <span class="p">=</span> <span class="n">action</span><span class="p">;</span>
            <span class="p">}</span>
 
            <span class="k">return</span> <span class="n">coroutine</span><span class="p">;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="k">void</span> <span class="nf">StopCoroutine</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">coroutine</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">Mono</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="n">Mono</span><span class="p">.</span><span class="nf">StopCoroutine</span><span class="p">(</span><span class="n">coroutine</span><span class="p">);</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="k">void</span> <span class="nf">StopAllCoroutines</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Mono</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">coroutines</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">coroutines</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="n">coroutines</span><span class="p">.</span><span class="nf">ForEach</span><span class="p">((</span><span class="n">c</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Mono</span><span class="p">.</span><span class="nf">StopCoroutine</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">IEnumerator</span> <span class="nf">GetCoroutine</span><span class="p">(</span><span class="n">MonoBehaviour</span> <span class="n">mono</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">action</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Mono</span> <span class="p">=</span> <span class="n">mono</span><span class="p">;</span>
            <span class="n">Action</span> <span class="p">=</span> <span class="n">action</span><span class="p">;</span>
            <span class="k">return</span> <span class="nf">InternalCoroutine</span><span class="p">();</span>
        <span class="p">}</span>
 
        <span class="k">private</span> <span class="n">IEnumerator</span> <span class="nf">InternalCoroutine</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Debugging</span><span class="p">)</span>
                <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">$"Starting dequeing </span><span class="p">{</span><span class="n">Queue</span><span class="p">.</span><span class="n">Count</span><span class="p">}</span><span class="s"> values!"</span><span class="p">);</span>
 
            <span class="k">while</span> <span class="p">(</span><span class="n">Queue</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">object</span> <span class="k">value</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
                <span class="kt">bool</span> <span class="n">dequeued</span> <span class="p">=</span> <span class="n">Queue</span><span class="p">.</span><span class="nf">TryDequeue</span><span class="p">(</span><span class="k">out</span> <span class="k">value</span><span class="p">);</span>
 
                <span class="k">if</span> <span class="p">(!</span><span class="n">dequeued</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">SecondsToWait</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
                        <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForEndOfFrame</span><span class="p">();</span>
                    <span class="k">else</span>
                        <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(</span><span class="n">SecondsToWait</span><span class="p">);</span>
 
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
 
                <span class="n">Action</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">((</span><span class="n">T</span><span class="p">)</span><span class="k">value</span><span class="p">);</span>
 
                <span class="k">if</span> <span class="p">(</span><span class="n">SecondsToWait</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
                    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForEndOfFrame</span><span class="p">();</span>
                <span class="k">else</span>
                    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(</span><span class="n">SecondsToWait</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Gist:</strong> https://gist.github.com/z3nth10n/060ef9a604095d927c6cd278a49b8262</p>

<p><strong>Example of use (looping a textureâ€™s pixels):</strong></p>

<p><img src="https://i.imgur.com/ekIIGrO.gif" alt="" /></p>

<p><img src="https://i.imgur.com/wX0sTIe.gif" alt="" /></p>

<p><strong>Best regards!</strong></p>
:ET