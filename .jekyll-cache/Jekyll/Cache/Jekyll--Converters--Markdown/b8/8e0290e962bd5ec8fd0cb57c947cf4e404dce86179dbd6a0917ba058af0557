I"¨%<h2 id="configure-heroku-to-use-multiple-subdomains-on-the-same-domain-for-free-with-ssl">Configure Heroku to use multiple subdomains on the same domain for free with SSL</h2>

<p>In this tutorial, the first step I‚Äôll show you is how to have a Heroku app deployed with PHP, that we will use as backend.</p>

<p>You‚Äôll need yto have an account on Heroku, so please <a href="https://signup.heroku.com/login">feel free to register</a>.</p>

<blockquote>
  <p>For this, you‚Äôll need to reproduce the steps on the <a href="https://devcenter.heroku.com/articles/getting-started-with-php">Getting started on PHP with Heroku tutorial</a> until the config vars part.</p>
</blockquote>

<p><strong>Note:</strong> If you already knows about how to deploy a PHP application, create one.</p>

<p>Once we arrive here, we will need to undo some steps from the Heroku tutorial, because personally, I won‚Äôt use Symfony (I prefer Laravel, I will teach some basics on next tutorials), but I don‚Äôt want to mess with routing by the moment.</p>

<p>So, you‚Äôll need to remove manually these lines from the <code class="highlighter-rouge">composer.json</code> file:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"require"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"silex/silex"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.0.4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"monolog/monolog"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.22"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"twig/twig"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"symfony/twig-bridge"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>replace this part like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"require"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div></div>

<p>By the moment we won‚Äôt use any require.</p>

<p>Then just use the following commands to update the project and upload a new version of it:</p>

<p>In Linux:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> vendor
<span class="nv">$ </span><span class="nb">rm </span>composer.lock
</code></pre></div></div>

<p>In Windows:</p>

<pre><code class="language-dos">@ rmdir /S vendor
@ del /F composer.lock
</code></pre>

<p>Then:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>composer <span class="nb">install</span>
<span class="nv">$ </span>git add <span class="nb">.</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"&lt;commit message&gt;"</span>
<span class="nv">$ </span>git push heroku master
</code></pre></div></div>

<h3 id="some-caveats">Some caveats</h3>

<p>In order to login on Heroku you‚Äôll need to execute the <code class="highlighter-rouge">heroku login</code> command, but once you make your first commit if you put wrong credentials (at pushing) <a href="https://devcenter.heroku.com/articles/git#http-git-authentication">an error would be prompting in your scene</a>, if this happens to you, I have a solution for you:</p>

<p>First remove Git credentials by using:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--system</span> <span class="nt">--unset</span> credential.helper
</code></pre></div></div>

<p>If you‚Äôre in Windows and you use Mingw64 console for your projects and you‚Äôre using CMD you‚Äôre out of risk because <a href="https://git-scm.com/docs/git-credential-store">the git-credential-store settings</a> won‚Äôt be deleted.</p>

<p>I just readed this article where <a href="https://devcenter.heroku.com/articles/authentication">Heroku suggests you to use its <code class="highlighter-rouge">auth:token</code> option</a>. This are the credentials you need to use on your first login, the one given from the <code class="highlighter-rouge">.netrc</code> at your HOME path.</p>

<h2 id="configure-custom-domains">Configure custom domains</h2>

<p>To achieve this you‚Äôll need to follow <a href="https://devcenter.heroku.com/articles/custom-domains#add-a-custom-domain-with-a-subdomain">this tutorial</a>. <strong>Note:</strong> Don‚Äôt try to add them until you deploy the app for first time.</p>

<p>Then all you need to do is add a new <code class="highlighter-rouge">CNAME record</code> on your Cloudflare dashboard (<a href="/en/2019/03/31/configuring-custom-domains-github-pages-part-1">we were using Cloudflare on the last post</a>) pointing to the DNS link prompted in console. <strong>Note:</strong> By default I use <code class="highlighter-rouge">app.example.com</code> subdomain.</p>

<p>But the good news here are that you can use as much subdomains as you need, and with some tricks, in your projects.</p>

<p>Normally other users would deploy several projects, but I want to use a single project. So, I would use some <code class="highlighter-rouge">.htaccess config</code> to achieve this.</p>

<p>The first thing to keep in mind is that we will use subfolders to point to different subfolders, for example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root
    web/
        phpmyadmin/ # This points to sql.example.com
        api/        # This points to api.example.com
        dev/        # This points to dev.example.com
</code></pre></div></div>

<p>First you‚Äôll need to add all these subdomains:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>heroku domains:add api.example.com
<span class="nv">$ </span>heroku domains:add dev.example.com
<span class="nv">$ </span>heroku domains:add sql.example.com
</code></pre></div></div>

<p>And then, go to Cloudflare and add there subdomains as <code class="highlighter-rouge">CNAME records</code>:</p>

<p><img src="https://github.com/uta-org/artwork/blob/master/blog/tutorials/01-heroku+free%20ssl/00.PNG?raw=true" alt="" /></p>

<ul>
  <li>In this screenshot I‚Äôm missing the <code class="highlighter-rouge">sql</code> subdomain.</li>
</ul>

<p>Remove the current <code class="highlighter-rouge">.htaccess</code> file under <code class="highlighter-rouge">web</code> folder and create a new one.</p>

<p>Then, you‚Äôll need the following .htaccess configuration:</p>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Options</span> +FollowSymLinks

<span class="nc">RewriteEngine</span> On

<span class="c"># Subdomain 1 (folder sql-admin)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^sql\.z3nth10n\.net$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/phpmyadmin/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /phpmyadmin/$1 [L]

<span class="c"># Subdomain 2 (folder api)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^api\.z3nth10n\.net$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/api/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /api/$1 [L]

<span class="c"># Subdomain 3 (folder dev)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^dev\.z3nth10n\.net$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/dev/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /dev/$1 [L]
</code></pre></div></div>

<p>As you can see it has a very simple pattern usage:</p>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Subdomain # (folder &lt;name&gt;)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^&lt;subdomain x&gt;\.example\.com$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/&lt;folder name&gt;/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /&lt;folder name&gt;/$1 [L]
</code></pre></div></div>

<h2 id="configuring-ssl">Configuring SSL</h2>

<p>We‚Äôll there come the problems. Because SSL isn‚Äôt free at all in Heroku. You‚Äôll need <a href="https://devcenter.heroku.com/articles/ssl">a paid dyno to have it</a>.</p>

<p>But Cloudflare can encrypt the last end-point (User-Cloudflare), for this, we will need to go to the Crypto section under our dashboard and put SSL to <strong>‚ÄúFlexible‚Äù mode</strong> (if you put it on <strong>‚ÄúFull‚Äù</strong> or <strong>‚ÄúFull (Strict)‚Äù</strong> a 502 error will be prompted). This means that Cloudflare will offer its SSL as protection, but from Heroku to Cloudflare there won‚Äôt be any encryptation tunnel as the one that SSL/TLS offers.</p>

<ul>
  <li>You can read more about this <a href="https://www.cloudflare.com/ssl/">here under ‚ÄúCloudflare SSL Configuration‚Äù heading</a>.</li>
</ul>

<p>Then, to enforce all users to use https by default, scroll down and <strong>enable the ‚ÄúAlways Use HTTPS‚Äù option</strong>.</p>

<p><strong>Best regards!</strong></p>
:ET