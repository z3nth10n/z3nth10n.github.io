I"'5<h2 id="concurrentqueuedcoroutines-implementación-thread-safe-de-concurrentqueues-dentro-de-coroutinas">ConcurrentQueuedCoroutines: Implementación Thread-Safe de ConcurrentQueues dentro de Coroutinas</h2>

<p>La idea de esta utilidad es que cuando tu almacenas items desde otro thread, puedas acceder desde el thread principal.</p>

<p>Mezclando esta idea, con coroutinas, que básicamente, es un sistema del prehistorico que implementó Unity en su momento. Funciona de la siguiente manera: se crea un IEnumerator (con yields), el cual cada MoveNext se ejecuta en cada frame (yield return null) o cuando el programador especifique (yield return new WaitForSeconds(3) equivalente a Thread.Sleep(3000)) (por tal de no bloquear el hilo principal. Y sí, para aquellos que se lo pregunten Unity todavía se ejecuta en un solo hilo).</p>

<p>Entonces, teniendo estas 2 cosas, ¿por qué no hacer Dequeue en cada MoveNext?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Concurrent</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
 
<span class="k">namespace</span> <span class="nn">GTAMapper.Extensions.Threading</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Coroutine</span><span class="p">&gt;</span> <span class="n">coroutines</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">Coroutine</span> <span class="n">coroutine</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">MonoBehaviour</span> <span class="n">Mono</span><span class="p">;</span>
 
        <span class="k">public</span> <span class="n">ConcurrentQueue</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">Queue</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Action</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">Debugging</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">float</span> <span class="n">SecondsToWait</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
 
        <span class="k">private</span> <span class="nf">ConcurrentQueuedCoroutines</span><span class="p">()</span>
        <span class="p">{</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="nf">ConcurrentQueuedCoroutines</span><span class="p">(</span><span class="kt">float</span> <span class="n">secondsToWait</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Queue</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentQueue</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span>
            <span class="n">coroutines</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Coroutine</span><span class="p">&gt;();</span>
            <span class="n">SecondsToWait</span> <span class="p">=</span> <span class="n">secondsToWait</span><span class="p">;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">Coroutine</span> <span class="nf">StartCoroutine</span><span class="p">(</span><span class="n">MonoBehaviour</span> <span class="n">monoBehaviour</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">action</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">coroutines</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">monoBehaviour</span><span class="p">.</span><span class="nf">StartCoroutine</span><span class="p">(</span><span class="nf">InternalCoroutine</span><span class="p">()));</span>
            <span class="n">Mono</span> <span class="p">=</span> <span class="n">monoBehaviour</span><span class="p">;</span>
            <span class="n">Action</span> <span class="p">=</span> <span class="n">action</span><span class="p">;</span>
 
            <span class="k">return</span> <span class="n">coroutine</span><span class="p">;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">Coroutine</span> <span class="nf">StartCoroutineOnce</span><span class="p">(</span><span class="n">MonoBehaviour</span> <span class="n">monoBehaviour</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">action</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Debugging</span><span class="p">)</span>
                <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Starting dequeing!"</span><span class="p">);</span>
 
            <span class="k">if</span> <span class="p">(</span><span class="n">coroutine</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">coroutine</span> <span class="p">=</span> <span class="n">monoBehaviour</span><span class="p">.</span><span class="nf">StartCoroutine</span><span class="p">(</span><span class="nf">InternalCoroutine</span><span class="p">());</span>
                <span class="n">Mono</span> <span class="p">=</span> <span class="n">monoBehaviour</span><span class="p">;</span>
                <span class="n">Action</span> <span class="p">=</span> <span class="n">action</span><span class="p">;</span>
            <span class="p">}</span>
 
            <span class="k">return</span> <span class="n">coroutine</span><span class="p">;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="k">void</span> <span class="nf">StopCoroutine</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">coroutine</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">Mono</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="n">Mono</span><span class="p">.</span><span class="nf">StopCoroutine</span><span class="p">(</span><span class="n">coroutine</span><span class="p">);</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="k">void</span> <span class="nf">StopAllCoroutines</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Mono</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">coroutines</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">coroutines</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="n">coroutines</span><span class="p">.</span><span class="nf">ForEach</span><span class="p">((</span><span class="n">c</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Mono</span><span class="p">.</span><span class="nf">StopCoroutine</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="n">IEnumerator</span> <span class="nf">GetCoroutine</span><span class="p">(</span><span class="n">MonoBehaviour</span> <span class="n">mono</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">action</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Mono</span> <span class="p">=</span> <span class="n">mono</span><span class="p">;</span>
            <span class="n">Action</span> <span class="p">=</span> <span class="n">action</span><span class="p">;</span>
            <span class="k">return</span> <span class="nf">InternalCoroutine</span><span class="p">();</span>
        <span class="p">}</span>
 
        <span class="k">private</span> <span class="n">IEnumerator</span> <span class="nf">InternalCoroutine</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Debugging</span><span class="p">)</span>
                <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">$"Starting dequeing </span><span class="p">{</span><span class="n">Queue</span><span class="p">.</span><span class="n">Count</span><span class="p">}</span><span class="s"> values!"</span><span class="p">);</span>
 
            <span class="k">while</span> <span class="p">(</span><span class="n">Queue</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">object</span> <span class="k">value</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
                <span class="kt">bool</span> <span class="n">dequeued</span> <span class="p">=</span> <span class="n">Queue</span><span class="p">.</span><span class="nf">TryDequeue</span><span class="p">(</span><span class="k">out</span> <span class="k">value</span><span class="p">);</span>
 
                <span class="k">if</span> <span class="p">(!</span><span class="n">dequeued</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">SecondsToWait</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
                        <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForEndOfFrame</span><span class="p">();</span>
                    <span class="k">else</span>
                        <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(</span><span class="n">SecondsToWait</span><span class="p">);</span>
 
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
 
                <span class="n">Action</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">((</span><span class="n">T</span><span class="p">)</span><span class="k">value</span><span class="p">);</span>
 
                <span class="k">if</span> <span class="p">(</span><span class="n">SecondsToWait</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
                    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForEndOfFrame</span><span class="p">();</span>
                <span class="k">else</span>
                    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(</span><span class="n">SecondsToWait</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Gist:</strong> https://gist.github.com/z3nth10n/060ef9a604095d927c6cd278a49b8262</p>

<p><strong>Ejemplo de uso (recorriendo una textura):</strong></p>

<p><img src="https://i.imgur.com/ekIIGrO.gif" alt="" /></p>

<p><img src="https://i.imgur.com/wX0sTIe.gif" alt="" /></p>

<p><strong>¡Un saludo!</strong></p>
:ET