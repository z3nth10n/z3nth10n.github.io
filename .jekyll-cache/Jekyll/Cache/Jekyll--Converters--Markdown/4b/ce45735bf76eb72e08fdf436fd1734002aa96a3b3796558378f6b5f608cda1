I"82<h2 id="batchedcoroutines-iterar-coroutinas-one-by-one">BatchedCoroutines: Iterar coroutinas one by one</h2>

<p>Do you want your ConcurrentQueues to be executed one by one? No problem, with this hard-coded implementation you will get it:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">GTAMapper.Extensions.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
 
<span class="k">namespace</span> <span class="nn">GTAMapper.Extensions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">BatchedCoroutines</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerator</span> <span class="nf">BatchCoroutines</span><span class="p">(</span>
            <span class="n">MonoBehaviour</span> <span class="n">monoBehaviour</span><span class="p">,</span>
            <span class="n">Action</span> <span class="n">finish</span><span class="p">,</span>
            <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;[]</span> <span class="n">waitUntil</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
            <span class="k">params</span> <span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;,</span> <span class="n">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;[]</span> <span class="n">tuple</span><span class="p">)</span> <span class="c1">// Tuple&lt;Action&lt;T&gt;, ConcurrentQueuedCoroutines&lt;T&gt;&gt; || dynamic</span>
                                                                                      <span class="c1">// Fix for: https://stackoverflow.com/questions/15417174/using-the-params-keyword-for-generic-parameters-in-c-sharp</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
 
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">val</span> <span class="k">in</span> <span class="n">tuple</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">waitUntil</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">waitUntil</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitUntil</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">waitUntil</span><span class="p">[</span><span class="n">i</span><span class="p">](</span><span class="n">i</span><span class="p">));</span>
 
                <span class="k">yield</span> <span class="k">return</span> <span class="n">val</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="nf">GetCoroutine</span><span class="p">(</span><span class="n">monoBehaviour</span><span class="p">,</span> <span class="n">val</span><span class="p">.</span><span class="n">Item1</span><span class="p">);</span>
 
                <span class="p">++</span><span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
 
            <span class="n">finish</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Example of use:</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">GTAMapper.Core</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
        <span class="k">protected</span> <span class="n">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">debuggingCoroutine</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(),</span>
                                                     <span class="n">colorCoroutine</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span>
    
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">StartCoroutine</span><span class="p">(</span><span class="n">BatchedCoroutines</span><span class="p">.</span><span class="nf">BatchCoroutines</span><span class="p">(</span>
                <span class="k">this</span><span class="p">,</span>
                <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">areCoroutinesCollected</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                <span class="n">F</span><span class="p">.</span><span class="nf">GetFuncs</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="p">(</span><span class="n">_ii</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">debuggingCoroutine</span><span class="p">.</span><span class="n">Queue</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">),</span>
                <span class="k">new</span> <span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;,</span> <span class="n">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;((</span><span class="n">obj</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="n">Tuple</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">Color</span><span class="p">&gt;</span> <span class="n">tuple</span> <span class="p">=</span> <span class="p">(</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">Color</span><span class="p">&gt;)</span><span class="n">obj</span><span class="p">;</span>
 
                    <span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span>
                            <span class="n">_x</span> <span class="p">=</span> <span class="n">i</span> <span class="p">%</span> <span class="n">width</span><span class="p">,</span>
                            <span class="n">_y</span> <span class="p">=</span> <span class="n">i</span> <span class="p">/</span> <span class="n">width</span><span class="p">;</span>
 
                    <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Color</span> <span class="n">actualColor</span> <span class="p">=</span> <span class="n">debugTexture</span><span class="p">.</span><span class="nf">GetPixel</span><span class="p">(</span><span class="n">_x</span><span class="p">,</span> <span class="n">_y</span><span class="p">),</span>
                                      <span class="n">mixedColor</span> <span class="p">=</span> <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Color</span><span class="p">.</span><span class="nf">Lerp</span><span class="p">(</span><span class="n">actualColor</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item2</span><span class="p">,</span> <span class="p">.</span><span class="m">5f</span><span class="p">);</span>
 
                    <span class="k">if</span> <span class="p">(</span><span class="n">actualColor</span> <span class="p">!=</span> <span class="n">mixedColor</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">debugTexture</span><span class="p">.</span><span class="nf">SetPixel</span><span class="p">(</span><span class="n">_x</span><span class="p">,</span> <span class="n">_y</span><span class="p">,</span> <span class="n">mixedColor</span><span class="p">);</span>
                        <span class="n">debugTexture</span><span class="p">.</span><span class="nf">Apply</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">},</span> <span class="n">colorCoroutine</span><span class="p">),</span>
                <span class="k">new</span> <span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;,</span> <span class="n">ConcurrentQueuedCoroutines</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;((</span><span class="n">obj</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="n">Color</span><span class="p">[]</span> <span class="n">colors</span> <span class="p">=</span> <span class="p">(</span><span class="n">Color</span><span class="p">[])</span><span class="n">obj</span><span class="p">;</span>
 
                    <span class="n">debugTexture</span><span class="p">.</span><span class="nf">SetPixels32</span><span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="nf">CastBack</span><span class="p">().</span><span class="nf">ToArray</span><span class="p">());</span>
                    <span class="n">debugTexture</span><span class="p">.</span><span class="nf">Apply</span><span class="p">();</span>
                <span class="p">},</span> <span class="n">debuggingCoroutine</span><span class="p">)));</span>
          <span class="p">}</span>
     <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
 
<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">F</span> <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;[]</span> <span class="nf">GetFuncs</span><span class="p">(</span><span class="k">params</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;[]</span> <span class="n">waitUntil</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">waitUntil</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Basically, in the two Queues we are doing Enqueue where necessary (in another thread).</p>

<p>When everything is finished, from the first thread, we call to execute what I just showed.</p>

<p>In my case, for example, this serves to show pixel by pixel where an <code class="highlighter-rouge">Texture2D</code> has been iterated.</p>

<p>The next thing that happens is that the image is filled with the flood-fill algorithm that I will show in the next post. (Basically, to know if it was done well)</p>

<p><strong>Gist:</strong> https://gist.github.com/z3nth10n/518d100795b28528f5a4ae9e8a0b5b4e</p>

<p><strong>Best regards!</strong></p>
:ET