I"Û<p>Estos dos scripts los uso para darle un nombre a los Threads, as√≠ cuando ejecuto un <a href="https://docs.microsoft.com/es-es/dotnet/api/system.threading.threadpool.queueuserworkitem?view=netframework-4.7.2"><code class="highlighter-rouge">ThreadPool.QueueUserWorkItem</code></a> (por ejemplo) puedo saber el nombre de la Queue.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
 
<span class="k">namespace</span> <span class="nn">GTAMapper.Extensions.Threading</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ThreadMarker</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="c1">//[ThreadStatic]</span>
        <span class="c1">//private static string __Name = $"Unity Thread #{Thread.CurrentThread.ManagedThreadId}";</span>
 
        <span class="k">private</span> <span class="k">static</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">ThreadNames</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
 
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">Name</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">lock</span> <span class="p">(</span><span class="n">ThreadNames</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">try</span>
                    <span class="p">{</span>
                        <span class="k">return</span> <span class="n">ThreadNames</span><span class="p">[</span><span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">ManagedThreadId</span><span class="p">];</span>
                    <span class="p">}</span>
                    <span class="k">catch</span>
                    <span class="p">{</span>
                        <span class="k">return</span> <span class="s">$"Unity Thread #</span><span class="p">{</span><span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">ManagedThreadId</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="nf">ThreadMarker</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">lock</span> <span class="p">(</span><span class="n">ThreadNames</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">ThreadNames</span><span class="p">.</span><span class="nf">AddOrSet</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">ManagedThreadId</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
            <span class="p">}</span>
 
            <span class="c1">// __Name = name;</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ThreadNames</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">ManagedThreadId</span><span class="p">);</span>
            <span class="c1">// __Name = "Un-Owned";</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
 
<span class="k">namespace</span> <span class="nn">GTAMapper.Extensions.Threading</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">NamedHandler</span><span class="p">&lt;</span><span class="n">TArg</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">TArg</span><span class="p">&gt;</span> <span class="n">Handler</span><span class="p">;</span>
 
        <span class="k">public</span> <span class="nf">NamedHandler</span><span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">TArg</span><span class="p">&gt;</span> <span class="n">handler</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Handler</span> <span class="p">=</span> <span class="n">arg</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="k">using</span> <span class="p">(</span><span class="k">new</span> <span class="nf">ThreadMarker</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">handler</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Ejemplo:</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">TaskId</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="p">().</span><span class="nf">Next</span><span class="p">();</span>
 
<span class="n">ThreadPool</span><span class="p">.</span><span class="nf">QueueUserWorkItem</span><span class="p">(</span><span class="k">new</span> <span class="n">NamedHandler</span><span class="p">&lt;</span><span class="n">WaitCallback</span><span class="p">&gt;(</span><span class="n">name</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">WaitCallback</span><span class="p">(</span><span class="n">BackgroundRunner</span><span class="p">)).</span><span class="nf">Handler</span><span class="p">(</span><span class="s">$"Ninja #</span><span class="p">{</span><span class="n">TaskId</span><span class="p">}</span><span class="s">"</span><span class="p">));</span>
</code></pre></div></div>

<p>En este momento, desde el m√©todo <code class="highlighter-rouge">BackgroundRunner</code> podr√≠as acceder al nombre de dicho <code class="highlighter-rouge">NamedHandler</code>.</p>

<p><strong>Gist:</strong> https://gist.github.com/z3nth10n/d64f669d844bd71dabef8861c88f2b99</p>

<p><strong>¬°Un saludo!</strong></p>
:ET