I"]0<h2 id="jekyll-plugin-issue-with-github-pages">Jekyll Plugin Issue with GitHub Pages</h2>

<p>For this blog, I knew I wanted to be able to customize it and did not want to learn how to customize WordPress themes. The idea of using a static site generator like <a href="https://jekyllrb.com">Jekyll</a> was appealing to me because I would not have to deal with a database. Also since <a href="https://pages.github.com">GitHub Pages</a> hosts and automatically builds Jekyll sites, I would not have to deal with hosting. I went about installing Jekyll locally, created a starter blog site and pushed my changes to GitHub. <a href="/">z3nth10n.github.io</a> was up and running quickly!</p>

<p>Then I wanted to embed a YouTube link to a <a href="/articles/virtues-of-great-programmers">blog post</a>. @joelverhagen posted a simple Jekyll YouTube Embed Plugin <a href="https://gist.github.com/joelverhagen/1805814">gist</a>. I tested locally and it generated the blog post and site fine. But when GitHub Pages tried to build the static html files it failed with an <code class="highlighter-rouge">Liquid Exception: Unknown tag 'youtube'</code> error message.</p>

<p>Apparently and understandably, GitHub Pages does not allow any arbitrary plugin as part of their Jekyll build process; specifically, <code class="highlighter-rouge">bundle exec jekyll build —safe</code> is ran. Instead GitHub Pages whitelists a limited set of Jekyll plugins listed <a href="https://pages.github.com/versions/">here</a>, only 47 at the time of this writing. So if you want to use a plugin that is not yet officially supported, you will have to ask GitHub support to add it. Here is an <a href="https://github.com/jekyll/jekyll/issues/325">example</a>: “Please please, whitelist jekyll-asciidoc plugin”. <a href="http://jekyllrb.com/docs/plugins/">Jekyll’s Plugin documentation page</a> suggests this workaround:</p>

<blockquote>
  <p>You can still use GitHub Pages to publish your site, but you’ll need to convert the site locally and push the generated static files to your GitHub repository instead of the Jekyll source files.</p>
</blockquote>

<p>The workaround is not as seamlessly as just simply pushing your branch to GitHub and having GitHub Pages automatically build the static site. I could had followed the suggestion and written a rake task to automate this locally but then I would have to remember to run the one extra command.</p>

<h2 id="taking-over-continuous-integration-with-circleci">Taking Over Continuous Integration with CircleCI</h2>

<p>Jekyll documentation has a neat example of <a href="http://jekyllrb.com/docs/continuous-integration/">Continuous Integration</a> with <a href="https://github.com/gjtorikian/html-proofer">html-proofer</a>. Running html-proofer will ensure that the html output will not have any broken links, images, etc. So I figured that I’d kill two birds with one stone and set up continuous integration on <a href="https://circleci.com/">CirleCI</a>. It will both run html-proofer and build the static html files. The workflow:</p>

<ol>
  <li>Push to a special gh-pages-ci branch</li>
  <li>CircleCI watches only the gh-pages-ci branch</li>
  <li>Test site via html-proofer</li>
  <li>Build the static html files</li>
  <li>Push the static html files to the git master branch</li>
  <li>This triggers GitHub Pages to update the site</li>
</ol>

<p>I chose to use the gh-pages-ci branch because I’ll likely use this technique for static html projects sites where GitHub Pages watches the gh-pages instead of master branch. The relevant scripts used in this workflow are below:</p>

<p>The rake task in the Rakefile that runs html-proofer:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">require</span> <span class="s1">'html/proofer'</span>

    <span class="n">task</span> <span class="ss">:test</span> <span class="k">do</span>
      <span class="n">sh</span> <span class="s2">"bundle exec jekyll build"</span>
      <span class="no">HTML</span><span class="o">::</span><span class="no">Proofer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
        <span class="s2">"./_site"</span><span class="p">,</span>
        <span class="ss">check_html: </span><span class="kp">true</span><span class="p">,</span>
        <span class="ss">only_4xx: </span><span class="kp">true</span>
      <span class="p">).</span><span class="nf">run</span>
    <span class="k">end</span>

</code></pre></div></div>

<p>The script/build_html script that will build the Jekyll site and push it to the master git branch:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c">#!/bin/bash -ex</span>

    <span class="nv">GIT_COMMIT_DESC</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

    <span class="c"># Setup git so we can use it</span>
    git config <span class="nt">--global</span> user.email <span class="s2">"&lt;your email&gt;"</span>
    git config <span class="nt">--global</span> user.name <span class="s2">"&lt;your username&gt;"</span>
    
    <span class="c"># Remove changes from current gh-pages-ci branch</span>
    git checkout <span class="nt">-f</span>
    git checkout master

    <span class="c"># Make sure that local master matches with remote master</span>
    <span class="c"># CircleCI merges made changes to master so need to reset it</span>
    git fetch origin master
    git reset <span class="nt">--hard</span> origin/master

    <span class="c"># Gets _site/* files and pushes them to master branch</span>
    <span class="c"># Note: CircleCI creates vendor and .bundle files</span>
    <span class="nb">mv </span>_site /tmp/
    <span class="nb">rm</span> <span class="nt">-rf</span> <span class="k">*</span> .bundle .sass-cache
    <span class="nb">mv</span> /tmp/_site/<span class="k">*</span> <span class="nb">.</span>
    git add <span class="nt">--all</span>
    git commit <span class="nt">-m</span> <span class="s2">"</span><span class="nv">$GIT_COMMIT_DESC</span><span class="s2">"</span>
    git push origin master

</code></pre></div></div>

<p>The circle.yml that is configured to only watch for changes in the gh-pages-ci branch:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">defaults</span><span class="pi">:</span> <span class="nl">&amp;defaults</span>
    <span class="na">working_directory</span><span class="pi">:</span> <span class="s">~/repo</span>
    
<span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">jobs</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
        <span class="s">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*defaults</span>
        <span class="na">docker</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.6.0-node</span>
        <span class="na">filters</span><span class="pi">:</span>
            <span class="na">branches</span><span class="pi">:</span>
                <span class="na">only</span><span class="pi">:</span>
                  <span class="pi">-</span> <span class="s">gh-pages-ci</span>
                <span class="na">ignore</span><span class="pi">:</span>
                  <span class="pi">-</span> <span class="s">master</span>
        <span class="na">environment</span><span class="pi">:</span>
            <span class="na">BUNDLER_VERSION</span><span class="pi">:</span> <span class="s">2.0.1</span>
            <span class="na">BUNDLE_PATH</span><span class="pi">:</span> <span class="s">~/repo/vendor/bundle</span>
            <span class="na">GIT_COMMIT_DESC</span><span class="pi">:</span> <span class="s">git log -1 --pretty=%B</span>
            <span class="na">JEKYLL_ENV</span><span class="pi">:</span> <span class="s">production</span>
        <span class="na">steps</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">checkout</span>
            <span class="pi">-</span> <span class="na">restore_cache</span><span class="pi">:</span>
                <span class="na">keys</span><span class="pi">:</span>
                    <span class="pi">-</span> <span class="s">rubygems-v1-{{  checksum "Gemfile.lock" }}</span>
                    <span class="pi">-</span> <span class="s">rubygems-v1-fallback</span>
            <span class="c1"># If you have submodules maybe you need to uncomment this</span>
            <span class="c1"># - run:</span>
            <span class="c1">#    name: Update Git submodules</span>
            <span class="c1">#    command: git submodule update --init --recursive</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Bundle Pre Install</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">gem install bundler:$BUNDLER_VERSION</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Bundle Install</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bundle check || bundle install</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Rake tests</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec rake</span>
            <span class="pi">-</span> <span class="na">save_cache</span><span class="pi">:</span>
                <span class="na">key</span><span class="pi">:</span> <span class="s">rubygems-v1-{{  checksum "Gemfile.lock" }}</span>
                <span class="na">paths</span><span class="pi">:</span>
                    <span class="pi">-</span> <span class="s">vendor/bundle</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Jekyll build</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec jekyll build --trace</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Run Build HTML</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bash ~/repo/script/build_html "`$GIT_COMMIT_DESC`"</span>

<span class="na">workflows</span><span class="pi">:</span>
    <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
    <span class="na">test-deploy</span><span class="pi">:</span>
        <span class="na">jobs</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">build</span>
</code></pre></div></div>

<h3 id="one-circleci-gotcha">One CircleCI Gotcha</h3>

<p>CircleCI is great about being security conscientious. They set things up so that a deploy read-only ssh key is used to clone the repo. Since the build_html script above pushes to master at the end, you will need to add a key that has write access to the repo. This is a simple 1-click step in “Project Settings -&gt; Permissions / Checkout SSH Keys”.</p>

<p><img src="/img/blogs/circleci-checkout-ssh-keys.png" alt="CircleCI Checkout SSH Keys" title="CircleCI Checkout SSH Keys" /></p>

<h3 id="summary-of-the-final-flow">Summary of the Final Flow</h3>

<p>All I have to do now to update the blog is make modifications to the gh-pages-ci branch and then run <code class="highlighter-rouge">git push</code>. It was more work to set this all up than just having GitHub Pages build the Jekyll site but the site will always be checked by html-proofer now. And now I am also able to use any Jekyll plugin that I need! <img class="emojione" alt="👍" src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png" /></p>
:ET