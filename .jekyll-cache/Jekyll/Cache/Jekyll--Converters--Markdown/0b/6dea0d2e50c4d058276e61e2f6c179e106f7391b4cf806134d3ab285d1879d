I"’8<h2 id="problemas-con-los-plugins-de-jekyll-en-github-pages">¬øProblemas con los plugins de Jekyll en Github Pages?</h2>

<p>Para este blog, sab√≠a que quer√≠a poder personalizarlo y no quer√≠a aprender a personalizar los temas de WordPress. La idea de utilizar un generador de sitio est√°tico como <a href="https://jekyllrb.com">Jekyll</a> me atra√≠a porque no tendr√≠a que tratar con una base de datos. Adem√°s, dado que <a href="https://pages.github.com">GitHub Pages</a> aloja y crea autom√°ticamente los sitios Jekyll, no tendr√≠a que lidiar con el hosting. Fui a instalar Jekyll localmente, cre√© un sitio de blog de inicio y envi√© mis cambios a GitHub. ¬°<a href="/">z3nth10n.github.io</a> estaba en funcionamiento!</p>

<p>Luego quise insertar un enlace de YouTube en la p√°gina principal del blog. @joelverhagen public√≥ un <a href="https://gist.github.com/joelverhagen/1805814">gist</a> de Jekyll YouTube Embed Plugin. Lo prob√© localmente y gener√≥ la publicaci√≥n del blog y el sitio bien. Pero cuando GitHub Pages trat√≥ de construir los archivos html est√°ticos, fall√≥ con un mensaje de error <code class="highlighter-rouge">Liquid Exception: Unknown tag 'youtube'</code>.</p>

<p>Aparentemente y de manera comprensible, GitHub Pages no permite ning√∫n complemento arbitrario como parte de su proceso de compilaci√≥n Jekyll; espec√≠ficamente, <code class="highlighter-rouge">bundle exec jekyll build ‚Äîsafe</code> se ejecuta. En su lugar, GitHub Pages incluye un conjunto limitado de complementos Jekyll enumerados <a href="https://pages.github.com/versions/">aqu√≠</a>, solo 47 en el momento de escribir este art√≠culo. Por lo tanto, si desea usar un complemento que a√∫n no est√° oficialmente soportado, tendr√° que pedirle a GitHub que lo agregue. Aqu√≠ hay un <a href="https://github.com/jekyll/jekyll/issues/325">ejemplo</a>: ‚ÄúPor favor, agregue el complemento jekyll-asciidoc a la lista blanca‚Äù. <a href="http://jekyllrb.com/docs/plugins/">La p√°gina de documentaci√≥n de Jekyll Plugins</a> sugiere esta soluci√≥n:</p>

<blockquote>
  <p>You can still use GitHub Pages to publish your site, but you‚Äôll need to convert the site locally and push the generated static files to your GitHub repository instead of the Jekyll source files.</p>
</blockquote>

<p>En espa√±ol:</p>

<blockquote>
  <p>A√∫n puede usar GitHub Pages para publicar su sitio, pero deber√° convertir el sitio localmente y enviar los archivos est√°ticos generados a su repositorio de GitHub en lugar de a los archivos de origen Jekyll.</p>
</blockquote>

<p>La soluci√≥n no es tan sencilla como simplemente hacer un push de tu rama a GitHub y hacer que GitHub Pages construya autom√°ticamente el sitio est√°tico. Podr√≠a haber seguido la sugerencia y haber escrito una tarea de rake para automatizar esto localmente, pero luego tendr√≠a que acordarse de ejecutar un comando adicional.</p>

<h2 id="comenzando-con-la-integraci√≥n-continua-con-circleci">Comenzando con la Integraci√≥n Continua con CircleCI</h2>

<p>Jekyll documentation has a neat example of <a href="http://jekyllrb.com/docs/continuous-integration/">Continuous Integration</a> with <a href="https://github.com/gjtorikian/html-proofer">html-proofer</a>. Running html-proofer will ensure that the html output will not have any broken links, images, etc. So I figured that I‚Äôd kill two birds with one stone and set up continuous integration on <a href="https://circleci.com/">CirleCI</a>. It will both run html-proofer and build the static html files. The workflow:</p>

<p>La documentaci√≥n de Jekyll tiene un buen ejemplo de <a href="http://jekyllrb.com/docs/continuous-integration/">Integraci√≥n Continua</a> con <a href="https://github.com/gjtorikian/html-proofer">html-proofer</a>. Ejecutar html-proofer asegurar√° que la salida de html no tenga enlaces rotos, im√°genes, etc. As√≠ que pens√© que matar√≠a dos p√°jaros de un tiro y configurar√≠a la integraci√≥n continua en <a href="https://circleci.com/">CirleCI</a>. Ejecutar√° html-proofer y construir√° los archivos html est√°ticos. El flujo de trabajo:</p>

<ol>
  <li>Haz un push a una rama especial de gh-pages-ci</li>
  <li>CircleCI mira solo la rama gh-pages-ci</li>
  <li>Prueba el sitio a trav√©s de html-proofer</li>
  <li>Construye los archivos html est√°ticos</li>
  <li>Haz un push de los archivos html est√°ticos a la rama ‚Äúmaster‚Äù de git</li>
  <li>Esto activa las GitHub Pages para actualizar el sitio.</li>
</ol>

<p>I chose to use the gh-pages-ci branch because I‚Äôll likely use this technique for static html projects sites where GitHub Pages watches the gh-pages instead of master branch. The relevant scripts used in this workflow are below:</p>

<p>The rake task in the Rakefile that runs html-proofer:</p>

<p>Eleg√≠ usar la rama gh-pages-ci porque probablemente usar√© esta t√©cnica para los sitios de proyectos que usen html est√°tico donde GitHub Pages mira las p√°ginas gh en lugar de la rama maestra. Los scripts relevantes utilizados en este flujo de trabajo se encuentran a continuaci√≥n:</p>

<p>La tarea de rake en el Rakefile que ejecuta html-proofer:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">require</span> <span class="s1">'html/proofer'</span>

    <span class="n">task</span> <span class="ss">:test</span> <span class="k">do</span>
      <span class="n">sh</span> <span class="s2">"bundle exec jekyll build"</span>
      <span class="no">HTML</span><span class="o">::</span><span class="no">Proofer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
        <span class="s2">"./_site"</span><span class="p">,</span>
        <span class="ss">check_html: </span><span class="kp">true</span><span class="p">,</span>
        <span class="ss">only_4xx: </span><span class="kp">true</span>
      <span class="p">).</span><span class="nf">run</span>
    <span class="k">end</span>

</code></pre></div></div>

<p>El script ‚Äúscript/build_html‚Äù que construir√° el sitio Jekyll y lo enviar√° a la rama principal (‚Äúmaster‚Äù) de git:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c">#!/bin/bash -ex</span>

    <span class="nv">GIT_COMMIT_DESC</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

    <span class="c"># Configurar git para que podamos usarlo</span>
    git config <span class="nt">--global</span> user.email <span class="s2">"&lt;your email&gt;"</span>
    git config <span class="nt">--global</span> user.name <span class="s2">"&lt;your username&gt;"</span>
    
    <span class="c"># Eliminar cambios de la rama gh-pages-ci actual</span>
    git checkout <span class="nt">-f</span>
    git checkout master

    <span class="c"># Aseg√∫rese de que la rama "master" local coincida con la rama "master" remota</span>
    <span class="c"># CircleCI combina los cambios realizados en la rama "master", por lo que es necesario restablecerlo</span>
    git fetch origin master
    git reset <span class="nt">--hard</span> origin/master

    <span class="c"># Obtiene los archivos "_site/*" y hace un push a la rama "master"</span>
    <span class="c"># Nota: CircleCI crea los archivos "vendor" y ".bundle" (por lo que ser√≠a conveniente borrarlos)</span>
    <span class="nb">mv </span>_site /tmp/
    <span class="nb">rm</span> <span class="nt">-rf</span> <span class="k">*</span> .bundle .sass-cache
    <span class="nb">mv</span> /tmp/_site/<span class="k">*</span> <span class="nb">.</span>
    git add <span class="nt">--all</span>
    git commit <span class="nt">-m</span> <span class="s2">"</span><span class="nv">$GIT_COMMIT_DESC</span><span class="s2">"</span>
    git push origin master

</code></pre></div></div>

<p>El circle.yml que est√° configurado para observar solo los cambios en la rama gh-pages-ci:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">defaults</span><span class="pi">:</span> <span class="nl">&amp;defaults</span>
    <span class="na">working_directory</span><span class="pi">:</span> <span class="s">~/repo</span>
    
<span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">jobs</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
        <span class="s">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*defaults</span>
        <span class="na">docker</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.6.0-node</span>
        <span class="na">filters</span><span class="pi">:</span>
            <span class="na">branches</span><span class="pi">:</span>
                <span class="na">only</span><span class="pi">:</span>
                  <span class="pi">-</span> <span class="s">gh-pages-ci</span>
                <span class="na">ignore</span><span class="pi">:</span>
                  <span class="pi">-</span> <span class="s">master</span>
        <span class="na">environment</span><span class="pi">:</span>
            <span class="na">BUNDLER_VERSION</span><span class="pi">:</span> <span class="s">2.0.1</span>
            <span class="na">BUNDLE_PATH</span><span class="pi">:</span> <span class="s">~/repo/vendor/bundle</span>
            <span class="na">GIT_COMMIT_DESC</span><span class="pi">:</span> <span class="s">git log -1 --pretty=%B</span>
            <span class="na">JEKYLL_ENV</span><span class="pi">:</span> <span class="s">production</span>
        <span class="na">steps</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">checkout</span>
            <span class="pi">-</span> <span class="na">restore_cache</span><span class="pi">:</span>
                <span class="na">keys</span><span class="pi">:</span>
                    <span class="pi">-</span> <span class="s">rubygems-v1-{{  checksum "Gemfile.lock" }}</span>
                    <span class="pi">-</span> <span class="s">rubygems-v1-fallback</span>
            <span class="c1"># Si usas submodules quiz√°s debas descomentar esto</span>
            <span class="c1"># - run:</span>
            <span class="c1">#    name: Update Git submodules</span>
            <span class="c1">#    command: git submodule update --init --recursive</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Bundle Pre Install</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">gem install bundler:$BUNDLER_VERSION</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Bundle Install</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bundle check || bundle install</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Rake tests</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec rake</span>
            <span class="pi">-</span> <span class="na">save_cache</span><span class="pi">:</span>
                <span class="na">key</span><span class="pi">:</span> <span class="s">rubygems-v1-{{  checksum "Gemfile.lock" }}</span>
                <span class="na">paths</span><span class="pi">:</span>
                    <span class="pi">-</span> <span class="s">vendor/bundle</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Jekyll build</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec jekyll build --trace</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">Run Build HTML</span>
                <span class="na">command</span><span class="pi">:</span> <span class="s">bash ~/repo/script/build_html "`$GIT_COMMIT_DESC`"</span>

<span class="na">workflows</span><span class="pi">:</span>
    <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
    <span class="na">test-deploy</span><span class="pi">:</span>
        <span class="na">jobs</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">build</span>
</code></pre></div></div>

<h3 id="un-consejo-para-circleci">Un consejo para CircleCI</h3>

<p>CircleCI is great about being security conscientious. They set things up so that a deploy read-only ssh key is used to clone the repo. Since the build_html script above pushes to master at the end, you will need to add a key that has write access to the repo. This is a simple 1-click step in ‚ÄúProject Settings -&gt; Permissions / Checkout SSH Keys‚Äù.</p>

<p>CircleCI es genial en ser consciente de la seguridad. Configuran las cosas para que se use una clave ssh de solo lectura para clonar el repositorio. Dado que la secuencia de comandos build_html anterior ejecuta un push a la rama ‚Äúmaster‚Äù al final, deber√° agregar una clave que tenga acceso de escritura al repositorio. Este es un paso simple de 1 clic en ‚ÄúConfiguraci√≥n del proyecto -&gt; Permisos / verificaci√≥n de claves SSH‚Äù (‚ÄúProject Settings -&gt; Permissions / Checkout SSH Keys‚Äù).</p>

<p><img src="/img/blogs/circleci-checkout-ssh-keys.png" alt="Verificaci√≥n de claves SSH por parte de CircleCI" title="CircleCI Checkout SSH Keys" /></p>

<h3 id="resumen-del-flujo-final">Resumen del flujo final</h3>

<p>Todo lo que hay que hacer ahora para actualizar el blog es hacer modificaciones a la rama gh-pages-ci y luego ejecutar <code class="highlighter-rouge">git push</code>. Fue m√°s trabajo configurar todo esto que solo hacer que GitHub Pages construya el sitio Jekyll, pero el sitio siempre ser√° revisado por html-proofer ahora. ¬°Y ahora tambi√©n puedo usar cualquier complemento de Jekyll que necesite! <img class="emojione" alt="üëç" src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png" /></p>
:ET