I"å'<h2 id="configurando-heroku-para-usar-m√∫ltiples-subdominios-en-el-mismo-dominio-de-forma-gratuita-con-ssl">Configurando Heroku para usar m√∫ltiples subdominios en el mismo dominio de forma gratuita con SSL</h2>

<p>En este tutorial, el primer paso que mostrar√© es c√≥mo implementar una aplicaci√≥n Heroku con PHP, que usaremos como backend.</p>

<p>Necesitar√°s tener una cuenta en Heroku, as√≠ que <a href="https://signup.heroku.com/login">no dudes en registrarte</a>.</p>

<blockquote>
  <p>Para esto, debe reproducir los pasos de la gu√≠a sobre [c√≥mo comenzar en PHP en Heroku] (https://devcenter.heroku.com/articles/getting-started-with-php) hasta la parte de configuraci√≥n de variables. (<strong>Nota:</strong> la gu√≠a est√° en ingl√©s)</p>
</blockquote>

<p><strong>Nota:</strong> Si ya sabes c√≥mo publicar una aplicaci√≥n PHP con Heroku, crea una.</p>

<p>Una vez que acabemos la gu√≠a, tendremos que deshacer algunos pasos del tutorial Heroku, porque personalmente, no usar√© Symfony (prefiero Laravel, ense√±ar√© algunos conceptos b√°sicos en los pr√≥ximos tutoriales), pero no quiero usar el enrutamiento que Symfony ofrece por el momento.</p>

<p>Volviendo al tema, debes eliminar manualmente estas l√≠neas del archivo <code class="highlighter-rouge">composer.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"require"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"silex/silex"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.0.4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"monolog/monolog"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.22"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"twig/twig"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"symfony/twig-bridge"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>reemplaza esta parte de esta manera:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"require"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div></div>

<p>Por el momento no utilizaremos ninguna dependencia.</p>

<p>Luego solo use los siguientes comandos para actualizar el proyecto y cargar una nueva versi√≥n del mismo:</p>

<p>En Linux:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> vendor
<span class="nv">$ </span><span class="nb">rm </span>composer.lock
</code></pre></div></div>

<p>En Windows:</p>

<pre><code class="language-dos">@ rmdir /S vendor
@ del /F composer.lock
</code></pre>

<p>Despu√©s:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>composer <span class="nb">install</span>
<span class="nv">$ </span>git add <span class="nb">.</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"&lt;descripci√≥n del commit&gt;"</span>
<span class="nv">$ </span>git push heroku master
</code></pre></div></div>

<h3 id="algunas-advertencias">Algunas advertencias</h3>

<p>Para iniciar sesi√≥n en Heroku, deber√°s ejecutar el comando <code class="highlighter-rouge">heroku login</code>, pero una vez que hagas tu primer commit si pones credenciales incorrectas (al hacer push) <a href="https: //devcenter.heroku.com/articles/git#http-git-authentication">un error ocurrir√°</a>, si esto te sucede, tengo una soluci√≥n:</p>

<p>Primero borra las credenciales de Git usando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--system</span> <span class="nt">--unset</span> credential.helper
</code></pre></div></div>

<p>Si est√°s en Windows y usas la consola Mingw64 para tus proyectos y est√°s usando CMD, est√°s fuera de riesgo porque <a href="https://git-scm.com/docs/git-credential-store">la configuraci√≥n del almac√©n de credenciales de git</a> no ser√° borrada.</p>

<p>Acabo de leer este art√≠culo donde <a href="https://devcenter.heroku.com/articles/authentication">Heroku sugiere que uses su opci√≥n <code class="highlighter-rouge">auth:token</code></a>. Estas son las credenciales que debes usar en tu primer inicio de sesi√≥n, la que se le da en el archivo <code class="highlighter-rouge">.netrc</code> en su HOME o en Windows: <code class="highlighter-rouge">C:/Users/&lt;tu usuario&gt;</code>.</p>

<h2 id="configurar-dominios-personalizados">Configurar dominios personalizados</h2>

<p>Para lograr esto, deber√° seguir <a href="https://devcenter.heroku.com/articles/custom-domains#add-a-custom-domain-with-a-Subdominio">este tutorial</a>. <strong>Nota:</strong> No intentes agregarlos hasta que no hagas tu primer push a la aplicaci√≥n.</p>

<p>Luego, todo lo que debes hacer es agregar un nuevo <strong>‚Äòregistro CNAME‚Äô</strong> en tu panel de Cloudflare (<a href="/es/2019/03/31/configuring-custom-domains-github-pages-part-1">est√°bamos usando Cloudflare en la √∫ltima publicaci√≥n</a> apuntando al enlace DNS solicitado en la consola. <strong>Nota:</strong> Por defecto, uso el subdominio <code class="highlighter-rouge">app.example.com</code>.</p>

<p>Pero la buena noticia aqu√≠ es que puedes usar tantos subdominios como necesites, y con algunos trucos, en tus proyectos.</p>

<p>Normalmente, otros usuarios desplegar√≠an varios proyectos, pero quiero usar un solo proyecto. Por lo tanto, usar√≠a algunos archivos <code class="highlighter-rouge">.htaccess</code> para lograr esto a trav√©s de la configuraci√≥n de Apache.</p>

<p>Lo primero que debe tener en cuenta es que usaremos subcarpetas para apuntar a diferentes subcarpetas, por ejemplo:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ra√≠z
    web/
        phpmyadmin/ # Esto apunta a sql.example.com
        api/        # Esto apunta a api.example.com
        dev/        # Esto apunta a dev.example.com
</code></pre></div></div>

<p>Primero necesitar√°s agregar todos estos subdominios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>heroku domains:add api.example.com
<span class="nv">$ </span>heroku domains:add dev.example.com
<span class="nv">$ </span>heroku domains:add sql.example.com
</code></pre></div></div>

<p>Luego, ve a Cloudflare y agregue subdominios como ‚Äúregistros CNAME‚Äù:</p>

<p><img src="https://github.com/uta-org/artwork/blob/master/blog/tutorials/01-heroku+free%20ssl/00.PNG?raw=true" alt="" /></p>

<ul>
  <li>En esta captura de pantalla me falta el subdominio <code class="highlighter-rouge">sql</code>.</li>
</ul>

<p>Elimina el archivo <code class="highlighter-rouge">.htaccess</code> actual en la carpeta <code class="highlighter-rouge">web</code> y cree uno nuevo.</p>

<p>Entonces, necesitar√°s la siguiente configuraci√≥n .htaccess:</p>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Options</span> +FollowSymLinks

<span class="nc">RewriteEngine</span> On

<span class="c"># Subdominio 1 (carpeta sql-admin)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^sql\.z3nth10n\.net$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/phpmyadmin/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /phpmyadmin/$1 [L]

<span class="c"># Subdominio 2 (carpeta api)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^api\.z3nth10n\.net$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/api/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /api/$1 [L]

<span class="c"># Subdominio 3 (carpeta dev)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^dev\.z3nth10n\.net$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/dev/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /dev/$1 [L]
</code></pre></div></div>

<p>As you can see it has a very simple pattern usage:</p>

<div class="language-apache highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Subdominio # (carpeta x)</span>
<span class="nc">RewriteCond</span> %{HTTP_HOST} ^&lt;subdominio x&gt;\.example\.com$ [NC]
<span class="nc">RewriteCond</span> %{REQUEST_URI} !^/&lt;nombre de carpeta&gt;/.*$
<span class="nc">RewriteRule</span> ^(.*)$ /&lt;nombre de carpeta&gt;/$1 [L]
</code></pre></div></div>

<h2 id="configurando-ssl">Configurando SSL</h2>

<p>Aqu√≠ vienen los problemas, ya que el SSL no es gratis en Heroku. Necesitar√°s <a href="https://devcenter.heroku.com/articles/ssl">un dyno pagado para tenerlo</a>.</p>

<p>Pero Cloudflare puede cifrar el √∫ltimo punto final (Usuario-Cloudflare), para esto, tendremos que ir a la secci√≥n Crypto debajo de nuestro tablero y colocar la opci√≥n SSL en <strong>el modo ‚ÄúFlexible‚Äù</strong> (si lo pone <strong>‚ÄúCompleto‚Äù</strong> o <strong>‚ÄúCompleto (estricto)‚Äù</strong> se mostrar√° un error 502). Esto significa que Cloudflare ofrecer√° su SSL como protecci√≥n, pero desde Heroku hasta Cloudflare no habr√° ning√∫n t√∫nel de encriptaci√≥n como el que ofrece SSL/TLS.</p>

<ul>
  <li>Puedes leer m√°s sobre esto <a href="https://www.cloudflare.com/ssl/">aqu√≠ bajo el encabezado ‚ÄúConfiguraci√≥n SSL de Cloudflare‚Äù</a>.</li>
</ul>

<p>Luego, para hacer que todos los usuarios usen <strong>https</strong> de manera predeterminada, despl√°zate hacia abajo y habilita la opci√≥n <strong>‚ÄúUsar siempre HTTPS‚Äù</strong>.</p>

<p><strong>¬°Un saludo!</strong></p>
:ET